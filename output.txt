
 =========     ALL TOKENS FOR "Comments.txt"     =========
Token Category: 68, Category Name: COMMENT, Value: /*
      This input file is meant to test lexer functionality for single-line/multi-line comments.
                                                                                                    */
Token Category: 68, Category Name: COMMENT, Value: // this is a comment
Token Category: 66, Category Name: Identifier, Value: this
Token Category: 17, Category Name: INHERITS_Keyword, Value: is
Token Category: 45, Category Name: NOT_Keyword, Value: not
Token Category: 66, Category Name: Identifier, Value: a
Token Category: 66, Category Name: Identifier, Value: comment
Token Category: 68, Category Name: COMMENT, Value: //
Token Category: 68, Category Name: COMMENT, Value: // Jiuf3iu3$$#$#()rh3j0+F[]earf\fmkla
Token Category: 68, Category Name: COMMENT, Value: // 海の向こうから、柔らかい風が吹いてきた。
Token Category: 68, Category Name: COMMENT, Value: // this comment gets
Token Category: 66, Category Name: Identifier, Value: cut
Token Category: 66, Category Name: Identifier, Value: off
Token Category: 68, Category Name: COMMENT, Value: /// this is a comment
Token Category: 68, Category Name: COMMENT, Value: ///////////// this is a comment too
Token Category: 68, Category Name: COMMENT, Value: /* this is a multi-line comment */
Token Category: 68, Category Name: COMMENT, Value: /* this is also a
   multi-line
   comment      */
Token Category: 68, Category Name: COMMENT, Value: /* multi-line comment */
Token Category: 68, Category Name: COMMENT, Value: // single-line comment
Token Category: 68, Category Name: COMMENT, Value: /*/*
   nested multi
   multi-line
   comment  */
Token Category: 55, Category Name: MULTIPLY_operator, Value: *
Token Category: 56, Category Name: DIVIDE_operator, Value: /
Token Category: 56, Category Name: DIVIDE_operator, Value: /
Token Category: 55, Category Name: MULTIPLY_operator, Value: *
Token Category: 56, Category Name: DIVIDE_operator, Value: /

 =========     ALL TOKENS FOR "ReturnsAndNot.txt"     =========
Token Category: 68, Category Name: COMMENT, Value: /*
  This test program is meant to test the edge cases with keywords "returns" and "not=".
  This is because these are keywords that have other keywords as substrings, i.e. "return"
  and "not" respectively.
*/
Token Category: 68, Category Name: COMMENT, Value: // "return" & "returns" test cases:
Token Category: 28, Category Name: RETURN_Keyword, Value: return
Token Category: 27, Category Name: RETURNS_Keyword, Value: returns
Token Category: 28, Category Name: RETURN_Keyword, Value: return
Token Category: 27, Category Name: RETURNS_Keyword, Value: returns
Token Category: 28, Category Name: RETURN_Keyword, Value: return
Token Category: 66, Category Name: Identifier, Value: return_
Token Category: 66, Category Name: Identifier, Value: returns_
Token Category: 66, Category Name: Identifier, Value: returnS
Token Category: 28, Category Name: RETURN_Keyword, Value: return
Token Category: 66, Category Name: Identifier, Value: testIdentifier
Token Category: 27, Category Name: RETURNS_Keyword, Value: returns
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 28, Category Name: RETURN_Keyword, Value: return
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 66, Category Name: Identifier, Value: returnIdentifier1
Token Category: 51, Category Name: GREATER_operator, Value: >
Token Category: 66, Category Name: Identifier, Value: returnIdentifier2
Token Category: 60, Category Name: RIGHT_PAREN_operator, Value: )
Token Category: 28, Category Name: RETURN_Keyword, Value: return
Token Category: 65, Category Name: DECIMAL, Value: 109.2
Token Category: 56, Category Name: DIVIDE_operator, Value: /
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 65, Category Name: DECIMAL, Value: 3902.7
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 64, Category Name: INTEGER, Value: 3
Token Category: 60, Category Name: RIGHT_PAREN_operator, Value: )
ERROR: ; is invalid.
Token Category: 27, Category Name: RETURNS_Keyword, Value: returns
Token Category: 67, Category Name: STRING, Value: "not@not=.com"
ERROR: ; is invalid.
Token Category: 68, Category Name: COMMENT, Value: // "not" & "not=" test cases:
Token Category: 45, Category Name: NOT_Keyword, Value: not
Token Category: 66, Category Name: Identifier, Value: nOt
Token Category: 66, Category Name: Identifier, Value: not_
Token Category: 46, Category Name: NOTEQUALS_Keyword, Value: not=
ERROR: _ is invalid.
Token Category: 46, Category Name: NOTEQUALS_Keyword, Value: not=
Token Category: 66, Category Name: Identifier, Value: noT
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 46, Category Name: NOTEQUALS_Keyword, Value: not=
Token Category: 46, Category Name: NOTEQUALS_Keyword, Value: Not=
Token Category: 45, Category Name: NOT_Keyword, Value: not
Token Category: 46, Category Name: NOTEQUALS_Keyword, Value: not=
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 46, Category Name: NOTEQUALS_Keyword, Value: not=
Token Category: 66, Category Name: Identifier, Value: nott
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 45, Category Name: NOT_Keyword, Value: not
Token Category: 60, Category Name: RIGHT_PAREN_operator, Value: )
Token Category: 51, Category Name: GREATER_operator, Value: >
Token Category: 66, Category Name: Identifier, Value: notNOT
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 46, Category Name: NOTEQUALS_Keyword, Value: not=
Token Category: 60, Category Name: RIGHT_PAREN_operator, Value: )
Token Category: 67, Category Name: STRING, Value: "notNOT"
Token Category: 45, Category Name: NOT_Keyword, Value: not
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 60, Category Name: RIGHT_PAREN_operator, Value: )
Token Category: 52, Category Name: LESS_operator, Value: <
Token Category: 52, Category Name: LESS_operator, Value: <
Token Category: 45, Category Name: NOT_Keyword, Value: not
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 64, Category Name: INTEGER, Value: 902
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 57, Category Name: LEFT_SQR_BRACE_operator, Value: [
Token Category: 64, Category Name: INTEGER, Value: 90
Token Category: 51, Category Name: GREATER_operator, Value: >
Token Category: 65, Category Name: DECIMAL, Value: 89.2
Token Category: 58, Category Name: RIGHT_SQR_BRACE_operator, Value: ]

 =========     ALL TOKENS FOR "Keywords.txt"     =========
Token Category: 68, Category Name: COMMENT, Value: /*
     This input file is meant to test lexer functionality for all possible keywords.
                                                                                        */
Token Category: 1, Category Name: OUTPUT_Keyword, Value: output
Token Category: 2, Category Name: ON_Keyword, Value: on
Token Category: 3, Category Name: CREATE_Keyword, Value: create
Token Category: 4, Category Name: CONSTANT_Keyword, Value: constant
Token Category: 5, Category Name: ELSEIF_Keyword, Value: elseif
Token Category: 6, Category Name: ME_Keyword, Value: me
Token Category: 7, Category Name: UNTIL_Keyword, Value: until
Token Category: 8, Category Name: PUBLIC_Keyword, Value: public
Token Category: 9, Category Name: PRIVATE_Keyword, Value: private
Token Category: 10, Category Name: ALERT_Keyword, Value: alert
Token Category: 11, Category Name: DETECT_Keyword, Value: detect
Token Category: 12, Category Name: ALWAYS_Keyword, Value: always
Token Category: 13, Category Name: CHECK_Keyword, Value: check
Token Category: 14, Category Name: PARENT_Keyword, Value: parent
Token Category: 15, Category Name: BLUEPRINT_Keyword, Value: blueprint
Token Category: 16, Category Name: SYSTEM_Keyword, Value: system
Token Category: 17, Category Name: INHERITS_Keyword, Value: is
Token Category: 18, Category Name: CAST_Keyword, Value: cast
Token Category: 19, Category Name: INPUT_Keyword, Value: input
Token Category: 20, Category Name: SAY_Keyword, Value: say
Token Category: 21, Category Name: NOW_Keyword, Value: now
Token Category: 22, Category Name: WHILE_Keyword, Value: while
Token Category: 23, Category Name: PACKAGE_Keyword, Value: package
Token Category: 24, Category Name: TIMES_Keyword, Value: times
Token Category: 25, Category Name: REPEAT_Keyword, Value: repeat
Token Category: 26, Category Name: ELSE_Keyword, Value: else
Token Category: 27, Category Name: RETURNS_Keyword, Value: returns
Token Category: 28, Category Name: RETURN_Keyword, Value: return
Token Category: 29, Category Name: AND_Keyword, Value: and
Token Category: 30, Category Name: OR_Keyword, Value: or
Token Category: 31, Category Name: UNDEFINED_Keyword, Value: undefined
Token Category: 32, Category Name: SHARED_Keyword, Value: shared
Token Category: 33, Category Name: ACTION_Keyword, Value: action
Token Category: 34, Category Name: INTEGER_Keyword, Value: integer
Token Category: 35, Category Name: NUMBER_Keyword, Value: number
Token Category: 36, Category Name: TEXT_Keyword, Value: text
Token Category: 37, Category Name: BOOLEAN_Keyword, Value: boolean
Token Category: 38, Category Name: USE_Keyword, Value: use
Token Category: 45, Category Name: NOT_Keyword, Value: not
Token Category: 45, Category Name: NOT_Keyword, Value: Not
Token Category: 46, Category Name: NOTEQUALS_Keyword, Value: not=
Token Category: 46, Category Name: NOTEQUALS_Keyword, Value: Not=
Token Category: 39, Category Name: MODULO_Keyword, Value: mod
Token Category: 40, Category Name: IF_Keyword, Value: if
Token Category: 41, Category Name: END_Keyword, Value: end
Token Category: 42, Category Name: CLASS_Keyword, Value: class
Token Category: 43, Category Name: TRUE_Keyword, Value: true
Token Category: 44, Category Name: FALSE_Keyword, Value: false

 =========     ALL TOKENS FOR "QuorumTestProgram.txt"     =========
Token Category: 68, Category Name: COMMENT, Value: /*
    As this assignment is based off Professor Stefik's Quorum language, I decided to create a
    sample program in Quorum to see how my lexer would tokenize it. To create my test
    program, I utilized the Quorum browser-IDE found at: https://quorumlanguage.com/learn.html.
*/
Token Category: 33, Category Name: ACTION_Keyword, Value: action
Token Category: 66, Category Name: Identifier, Value: Main
Token Category: 1, Category Name: OUTPUT_Keyword, Value: output
Token Category: 67, Category Name: STRING, Value: "Hello World"
Token Category: 34, Category Name: INTEGER_Keyword, Value: integer
Token Category: 66, Category Name: Identifier, Value: a
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 64, Category Name: INTEGER, Value: 6
Token Category: 34, Category Name: INTEGER_Keyword, Value: integer
Token Category: 66, Category Name: Identifier, Value: b
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 64, Category Name: INTEGER, Value: 7
Token Category: 35, Category Name: NUMBER_Keyword, Value: number
Token Category: 66, Category Name: Identifier, Value: c
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 65, Category Name: DECIMAL, Value: 6.7
Token Category: 35, Category Name: NUMBER_Keyword, Value: number
Token Category: 66, Category Name: Identifier, Value: sum
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 66, Category Name: Identifier, Value: a
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 66, Category Name: Identifier, Value: c
Token Category: 34, Category Name: INTEGER_Keyword, Value: integer
Token Category: 66, Category Name: Identifier, Value: modulus
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 66, Category Name: Identifier, Value: a
Token Category: 39, Category Name: MODULO_Keyword, Value: mod
Token Category: 66, Category Name: Identifier, Value: b
Token Category: 20, Category Name: SAY_Keyword, Value: say
Token Category: 67, Category Name: STRING, Value: "The sum of a and c is:"
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 66, Category Name: Identifier, Value: sum
Token Category: 20, Category Name: SAY_Keyword, Value: say
Token Category: 67, Category Name: STRING, Value: "The remainder of a and b is:"
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 66, Category Name: Identifier, Value: modulus
Token Category: 37, Category Name: BOOLEAN_Keyword, Value: boolean
Token Category: 66, Category Name: Identifier, Value: matchaTasteLikeGrass
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 43, Category Name: TRUE_Keyword, Value: true
Token Category: 25, Category Name: REPEAT_Keyword, Value: repeat
Token Category: 64, Category Name: INTEGER, Value: 5
Token Category: 24, Category Name: TIMES_Keyword, Value: times
Token Category: 1, Category Name: OUTPUT_Keyword, Value: output
Token Category: 67, Category Name: STRING, Value: "for(int i = 0; i < 5; i++)"
Token Category: 41, Category Name: END_Keyword, Value: end
Token Category: 40, Category Name: IF_Keyword, Value: if
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 43, Category Name: TRUE_Keyword, Value: true
Token Category: 60, Category Name: RIGHT_PAREN_operator, Value: )
Token Category: 20, Category Name: SAY_Keyword, Value: say
Token Category: 67, Category Name: STRING, Value: "double hamburger, animal style, no pickles, add whole grilled onions"
Token Category: 41, Category Name: END_Keyword, Value: end
Token Category: 28, Category Name: RETURN_Keyword, Value: return
Token Category: 64, Category Name: INTEGER, Value: 0
Token Category: 41, Category Name: END_Keyword, Value: end
Token Category: 42, Category Name: CLASS_Keyword, Value: class
Token Category: 66, Category Name: Identifier, Value: ReeceGalgana
Token Category: 37, Category Name: BOOLEAN_Keyword, Value: boolean
Token Category: 66, Category Name: Identifier, Value: handsome
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 43, Category Name: TRUE_Keyword, Value: true
Token Category: 37, Category Name: BOOLEAN_Keyword, Value: boolean
Token Category: 66, Category Name: Identifier, Value: funny
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 43, Category Name: TRUE_Keyword, Value: true
Token Category: 37, Category Name: BOOLEAN_Keyword, Value: boolean
Token Category: 66, Category Name: Identifier, Value: smart
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 43, Category Name: TRUE_Keyword, Value: true
Token Category: 41, Category Name: END_Keyword, Value: end

 =========     ALL TOKENS FOR "IntegersAndDecimals.txt"     =========
Token Category: 68, Category Name: COMMENT, Value: /*
     This input file is meant to test lexer functionality for integers and decimals.
                                                                                        */
Token Category: 64, Category Name: INTEGER, Value: 1
Token Category: 65, Category Name: DECIMAL, Value: 12.2
Token Category: 65, Category Name: DECIMAL, Value: 32.
Token Category: 64, Category Name: INTEGER, Value: 453
Token Category: 64, Category Name: INTEGER, Value: 354
Token Category: 65, Category Name: DECIMAL, Value: 0001.1101
Token Category: 48, Category Name: PERIOD_operator, Value: .
Token Category: 65, Category Name: DECIMAL, Value: 1010.0010
Token Category: 64, Category Name: INTEGER, Value: 1
Token Category: 66, Category Name: Identifier, Value: one
Token Category: 66, Category Name: Identifier, Value: one1
Token Category: 65, Category Name: DECIMAL, Value: 1.
Token Category: 66, Category Name: Identifier, Value: one
Token Category: 48, Category Name: PERIOD_operator, Value: .
Token Category: 64, Category Name: INTEGER, Value: 123
Token Category: 67, Category Name: STRING, Value: "456"
Token Category: 64, Category Name: INTEGER, Value: 789
Token Category: 65, Category Name: DECIMAL, Value: 1234.5
Token Category: 68, Category Name: COMMENT, Value: //6789

 =========     ALL TOKENS FOR "Identifiers.txt"     =========
Token Category: 68, Category Name: COMMENT, Value: /*
    This test program is meant to test identifiers. Particularly, looks
    to see how they tokenize based on interactions with operators,
    and how they interact with ID names with keywords inside them, i.e.
    keyword "alert" is inside identifier "alertness."
*/
Token Category: 66, Category Name: Identifier, Value: Identifier
Token Category: 66, Category Name: Identifier, Value: x
Token Category: 66, Category Name: Identifier, Value: message
Token Category: 66, Category Name: Identifier, Value: alertness
Token Category: 66, Category Name: Identifier, Value: message
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 10, Category Name: ALERT_Keyword, Value: alert
Token Category: 51, Category Name: GREATER_operator, Value: >
Token Category: 66, Category Name: Identifier, Value: memememememememe
Token Category: 10, Category Name: ALERT_Keyword, Value: alert
Token Category: 57, Category Name: LEFT_SQR_BRACE_operator, Value: [
Token Category: 66, Category Name: Identifier, Value: alertness
Token Category: 58, Category Name: RIGHT_SQR_BRACE_operator, Value: ]
Token Category: 67, Category Name: STRING, Value: "!d3nt!fiER~~~~"
Token Category: 66, Category Name: Identifier, Value: identifer_
ERROR: _ is invalid.
Token Category: 66, Category Name: Identifier, Value: identifier
Token Category: 66, Category Name: Identifier, Value: IDEN234TIFier
Token Category: 66, Category Name: Identifier, Value: IDEN2___3TIFier
Token Category: 66, Category Name: Identifier, Value: undefined_
Token Category: 66, Category Name: Identifier, Value: unde_fined
ERROR: _ is invalid.
Token Category: 31, Category Name: UNDEFINED_Keyword, Value: undefined

 =========     ALL TOKENS FOR "Garbage.txt"     =========
Token Category: 68, Category Name: COMMENT, Value: /*
     This input file is meant to analyze how the lexer tokenizes incomprehensible
     random sequences of letters, numbers, and symbols. (I randomly hit the keyboard).
                                                                                        */
Token Category: 66, Category Name: Identifier, Value: b
Token Category: 66, Category Name: Identifier, Value: gehjkw
Token Category: 66, Category Name: Identifier, Value: noi
Token Category: 64, Category Name: INTEGER, Value: 3
Token Category: 66, Category Name: Identifier, Value: ji
Token Category: 66, Category Name: Identifier, Value: w4t
Token Category: 57, Category Name: LEFT_SQR_BRACE_operator, Value: [
Token Category: 66, Category Name: Identifier, Value: g
Token Category: 64, Category Name: INTEGER, Value: 4
Token Category: 66, Category Name: Identifier, Value: w
Token Category: 66, Category Name: Identifier, Value: t
Token Category: 58, Category Name: RIGHT_SQR_BRACE_operator, Value: ]
Token Category: 66, Category Name: Identifier, Value: w
Token Category: 64, Category Name: INTEGER, Value: 4
Token Category: 66, Category Name: Identifier, Value: t
Token Category: 54, Category Name: MINUS_operator, Value: -
Token Category: 58, Category Name: RIGHT_SQR_BRACE_operator, Value: ]
Token Category: 64, Category Name: INTEGER, Value: 30
Token Category: 66, Category Name: Identifier, Value: or0q
Token Category: 54, Category Name: MINUS_operator, Value: -
Token Category: 58, Category Name: RIGHT_SQR_BRACE_operator, Value: ]
Token Category: 66, Category Name: Identifier, Value: r
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 54, Category Name: MINUS_operator, Value: -
Token Category: 64, Category Name: INTEGER, Value: 3
Token Category: 66, Category Name: Identifier, Value: to
Token Category: 58, Category Name: RIGHT_SQR_BRACE_operator, Value: ]
Token Category: 54, Category Name: MINUS_operator, Value: -
Token Category: 66, Category Name: Identifier, Value: FI
Token Category: 54, Category Name: MINUS_operator, Value: -
Token Category: 64, Category Name: INTEGER, Value: 3
Token Category: 66, Category Name: Identifier, Value: W0
Token Category: 64, Category Name: INTEGER, Value: 4
Token Category: 66, Category Name: Identifier, Value: TW0
Token Category: 58, Category Name: RIGHT_SQR_BRACE_operator, Value: ]
Token Category: 54, Category Name: MINUS_operator, Value: -
Token Category: 64, Category Name: INTEGER, Value: 4
Token Category: 66, Category Name: Identifier, Value: TQO0R3I
Token Category: 67, Category Name: STRING, Value: "POR#K)_
  3R0R[

#)IR_}#"
Token Category: 66, Category Name: Identifier, Value: PF
Token Category: 66, Category Name: Identifier, Value: FPELKPSJIOES
Token Category: 52, Category Name: LESS_operator, Value: <
Token Category: 66, Category Name: Identifier, Value: E
Token Category: 47, Category Name: COLON_operator, Value: :
Token Category: 51, Category Name: GREATER_operator, Value: >
Token Category: 66, Category Name: Identifier, Value: FO
ERROR: _ is invalid.
ERROR: _ is invalid.

 =========     ALL TOKENS FOR "Strings.txt"     =========
Token Category: 68, Category Name: COMMENT, Value: /*
          This input file is meant to test lexer functionality for strings.
                                                                                        */
Token Category: 67, Category Name: STRING, Value: "string"
Token Category: 67, Category Name: STRING, Value: "multi
 line
 string"
Token Category: 67, Category Name: STRING, Value: ""
Token Category: 67, Category Name: STRING, Value: ""
Token Category: 67, Category Name: STRING, Value: ""
Token Category: 67, Category Name: STRING, Value: "."
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 48, Category Name: PERIOD_operator, Value: .
Token Category: 67, Category Name: STRING, Value: "."
Token Category: 67, Category Name: STRING, Value: "class"
Token Category: 67, Category Name: STRING, Value: "123"
Token Category: 67, Category Name: STRING, Value: "123.123"
Token Category: 67, Category Name: STRING, Value: "903_3904"
Token Category: 67, Category Name: STRING, Value: "jnfkewnifonewik"
Token Category: 67, Category Name: STRING, Value: "そなはいななんはいちは"

 =========     ALL TOKENS FOR "Random.txt"     =========
Token Category: 68, Category Name: COMMENT, Value: /*
      This input file is meant to test lexer functionality for ordered chaos. This file will
      consist of keywords, operators, strings, integers, decimals, comments.
                                                                                                    */
Token Category: 28, Category Name: RETURN_Keyword, Value: return
Token Category: 57, Category Name: LEFT_SQR_BRACE_operator, Value: [
Token Category: 28, Category Name: RETURN_Keyword, Value: return
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 27, Category Name: RETURNS_Keyword, Value: returns
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 66, Category Name: Identifier, Value: ifelseif
Token Category: 55, Category Name: MULTIPLY_operator, Value: *
Token Category: 40, Category Name: IF_Keyword, Value: if
Token Category: 55, Category Name: MULTIPLY_operator, Value: *
Token Category: 60, Category Name: RIGHT_PAREN_operator, Value: )
Token Category: 58, Category Name: RIGHT_SQR_BRACE_operator, Value: ]
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 68, Category Name: COMMENT, Value: // Random Keyword Sequence!
Token Category: 66, Category Name: Identifier, Value: ident
Token Category: 57, Category Name: LEFT_SQR_BRACE_operator, Value: [
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 58, Category Name: RIGHT_SQR_BRACE_operator, Value: ]
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 54, Category Name: MINUS_operator, Value: -
Token Category: 67, Category Name: STRING, Value: ")id+output
"
ERROR: ^ is invalid.
ERROR: ^ is invalid.
ERROR: ^ is invalid.
Token Category: 61, Category Name: DOUBLE_QUOTE_operator, Value: "
Token Category: 66, Category Name: Identifier, Value: test
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 26, Category Name: ELSE_Keyword, Value: else
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 9, Category Name: PRIVATE_Keyword, Value: private
Token Category: 60, Category Name: RIGHT_PAREN_operator, Value: )
Token Category: 56, Category Name: DIVIDE_operator, Value: /
Token Category: 47, Category Name: COLON_operator, Value: :
Token Category: 66, Category Name: Identifier, Value: ERRORS
ERROR: ; is invalid.
ERROR: ; is invalid.
ERROR: ; is invalid.
ERROR: _ is invalid.
Token Category: 66, Category Name: Identifier, Value: notError_
Token Category: 68, Category Name: COMMENT, Value: /* ~ */
Token Category: 65, Category Name: DECIMAL, Value: 12.243
Token Category: 55, Category Name: MULTIPLY_operator, Value: *
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 66, Category Name: Identifier, Value: message
ERROR: @ is invalid.
Token Category: 39, Category Name: MODULO_Keyword, Value: mod

 =========     ALL TOKENS FOR "Operators.txt"     =========
Token Category: 68, Category Name: COMMENT, Value: /*
     This input file is meant to test operator functionality. More specifically,
     how it interacts with strings, identifiers, integers, decimals, and keywords.
                                                                                        */
Token Category: 64, Category Name: INTEGER, Value: 1
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 64, Category Name: INTEGER, Value: 2
Token Category: 66, Category Name: Identifier, Value: one
Token Category: 54, Category Name: MINUS_operator, Value: -
Token Category: 64, Category Name: INTEGER, Value: 2
Token Category: 47, Category Name: COLON_operator, Value: :
Token Category: 66, Category Name: Identifier, Value: colon
Token Category: 49, Category Name: COMMA_operator, Value: ,
Token Category: 66, Category Name: Identifier, Value: comma
Token Category: 61, Category Name: DOUBLE_QUOTE_operator, Value: "
Token Category: 66, Category Name: Identifier, Value: doublequote
Token Category: 66, Category Name: Identifier, Value: int
Token Category: 57, Category Name: LEFT_SQR_BRACE_operator, Value: [
Token Category: 66, Category Name: Identifier, Value: x
Token Category: 58, Category Name: RIGHT_SQR_BRACE_operator, Value: ]
Token Category: 46, Category Name: NOTEQUALS_Keyword, Value: not=
Token Category: 63, Category Name: GREATER_EQUAL_operator, Value: >=
Token Category: 45, Category Name: NOT_Keyword, Value: not
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 65, Category Name: DECIMAL, Value: 79.2
Token Category: 60, Category Name: RIGHT_PAREN_operator, Value: )
Token Category: 64, Category Name: INTEGER, Value: 900
Token Category: 51, Category Name: GREATER_operator, Value: >
Token Category: 64, Category Name: INTEGER, Value: 9
Token Category: 63, Category Name: GREATER_EQUAL_operator, Value: >=
Token Category: 65, Category Name: DECIMAL, Value: 0.9
Token Category: 66, Category Name: Identifier, Value: id
Token Category: 62, Category Name: LESS_EQUAL_operator, Value: <=
Token Category: 63, Category Name: GREATER_EQUAL_operator, Value: >=
Token Category: 50, Category Name: EQUALITY_operator, Value: =
Token Category: 46, Category Name: NOTEQUALS_Keyword, Value: not=
Token Category: 52, Category Name: LESS_operator, Value: <
Token Category: 53, Category Name: PLUS_operator, Value: +
Token Category: 55, Category Name: MULTIPLY_operator, Value: *
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 59, Category Name: LEFT_PAREN_operator, Value: (
Token Category: 40, Category Name: IF_Keyword, Value: if
Token Category: 57, Category Name: LEFT_SQR_BRACE_operator, Value: [
